package boson

import spinal.core._
import spinal.lib._
import boson.defines.DecodedInst

case class BosonConfig(
    pcWidth: Int = 32,
    addrWidth: Int = 32,
    dataWidth: Int = 32,
    regAddrWidth: Int = 5, // 32 registers (r0-r31)
    instructionWidth: Int = 32,
    resetPc: BigInt = 0x00000000,
    // --- Memory System Configuration ---
    axiSimMem: Boolean = true, // Use simulation RAM by default
    axiSimMemSize: BigInt = 1 MiB
) {

  // --- General Pipeline Data ---
  object PC extends Stageable(UInt(pcWidth bits))
  object PREDICTED_PC extends Stageable(UInt(pcWidth bits))
  object INSTRUCTION extends Stageable(Bits(instructionWidth bits))
  object DECODED_INST_OUTPUT extends Stageable(DecodedInst())
  object IS_FETCH_INST_VALID extends Stageable(Bool())

  // --- Decoded Information ---
  object OPCODE extends Stageable(Bits(6 bits))
  object FUNCT extends Stageable(Bits(10 bits))
  object RD extends Stageable(UInt(regAddrWidth bits))
  object RJ extends Stageable(UInt(regAddrWidth bits))
  object RK extends Stageable(UInt(regAddrWidth bits))
  object IMM_SI12 extends Stageable(SInt(12 bits))
  object IMM_UI12 extends Stageable(UInt(12 bits))
  object IMM_SI16 extends Stageable(SInt(16 bits))
  object IMM_UI20 extends Stageable(UInt(20 bits))
  object IMM_SI26 extends Stageable(SInt(26 bits))

  // Control Signals
  object AluOp extends SpinalEnum(binarySequential) {
    val NOP, ADD, SUB, SLT, SLTU, AND, OR, XOR, SLL, SRL, SRA, LU12I_OP, PCADDU12I_OP =
      newElement() // Added specific ops
  }
  object ALU_OP extends Stageable(AluOp())
  object IS_BRANCH extends Stageable(Bool())
  object IS_COND_BRANCH extends Stageable(Bool())
  object IS_JUMP extends Stageable(Bool())
  object IS_JUMP_LINK extends Stageable(Bool())
  object IS_LOAD extends Stageable(Bool())
  object IS_STORE extends Stageable(Bool())
  object IS_FPU extends Stageable(Bool())
  object IS_SYSCALL extends Stageable(Bool())
  object IS_BREAK extends Stageable(Bool())
  object WRITE_ENABLE extends Stageable(Bool())
  object LINK_ADDR extends Stageable(UInt(pcWidth bits))

  // Memory Access Control
  object MemOp extends SpinalEnum(binarySequential) {
    val NONE, LOAD_B, LOAD_BU, LOAD_H, LOAD_HU, LOAD_W, STORE_B, STORE_H, STORE_W = newElement()
  }
  object MEM_OP extends Stageable(MemOp())
  object MEM_SIGNED extends Stageable(Bool())

  // --- Register Read Results ---
  object RJ_DATA extends Stageable(Bits(dataWidth bits))
  object RK_DATA extends Stageable(Bits(dataWidth bits))

  // --- Execute Stage Results ---
  object ALU_RESULT extends Stageable(Bits(dataWidth bits))
  object EFF_ADDRESS extends Stageable(UInt(addrWidth bits))
  object BRANCH_CALC_TARGET extends Stageable(UInt(pcWidth bits))
  object BRANCH_TAKEN extends Stageable(Bool())

  // --- Memory Stage Results ---
  object MEM_READ_DATA extends Stageable(Bits(dataWidth bits))

  // --- Writeback Stage Data ---
  object WB_DATA extends Stageable(Bits(dataWidth bits))

  // --- Hazard / Forwarding Signals (Generated by HazardUnit) ---
  object EX_FWD_RJ_VALID extends Stageable(Bool())
  object EX_FWD_RK_VALID extends Stageable(Bool())
  object MEM_FWD_RJ_VALID extends Stageable(Bool())
  object MEM_FWD_RK_VALID extends Stageable(Bool())
  object WB_FWD_RJ_VALID extends Stageable(Bool())
  object WB_FWD_RK_VALID extends Stageable(Bool())

  object EX_FWD_DATA extends Stageable(Bits(dataWidth bits))
  object MEM_FWD_DATA extends Stageable(Bits(dataWidth bits))
  object WB_FWD_DATA extends Stageable(Bits(dataWidth bits))

  object STALL_FETCH extends Stageable(Bool())
  object STALL_DECODE extends Stageable(Bool())
}
